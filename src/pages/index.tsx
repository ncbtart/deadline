import Head from "next/head";

import { api } from "@/utils/api";
import Link from "next/link";

import { type GetServerSidePropsContext } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import superjson from "superjson";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import { getSession } from "next-auth/react";

import {
  FireIcon,
  FolderPlusIcon,
  MagnifyingGlassIcon,
} from "@heroicons/react/24/outline";

import { Button, Card, Pagination, Textfield } from "@/components/core";
import LoggedLayout from "@/components/layout/private";
import TableDashboard from "@/components/dashboard/table";
import { useState } from "react";

interface Sort {
  name: string;
  order: "asc" | "desc";
}

const Home = () => {
  const [search, setSearch] = useState("");
  const [sort, setSort] = useState<Sort>();

  const [page, setPage] = useState(1);

  const { data: echeances, status } = api.echeance.findAll.useQuery(
    {
      filter: search,
      sort,
      page,
    },
    {
      staleTime: 0 * 1000,
      keepPreviousData: true,
    }
  );

  const handleSort = (name: string) => {
    if (sort?.name === name) {
      setSort({
        name,
        order: sort.order === "asc" ? "desc" : "asc",
      });
    } else {
      setSort({
        name,
        order: "asc",
      });
    }
  };

  console.log(echeances?.totalPages);

  return (
    <>
      <Head>
        <title>Deadline - Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LoggedLayout>
        <div className="flex min-h-screen flex-col content-center items-center justify-center ">
          {status === "loading" ? (
            <div className="mt-6 flex items-center justify-center">
              <div className="h-10 w-10 animate-spin rounded-full border-pink-600"></div>
            </div>
          ) : (
            <Card className="invisible w-3/4 bg-white sm:visible">
              <div className="container flex flex-col">
                {/* Dashboard Header */}
                <div className="flex items-center gap-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-pink-600 sm:h-8 sm:w-8"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M13 10V3L4 14h7v7l9-11h-7z"
                    />
                  </svg>

                  <h3 className="text-xl font-bold sm:text-2xl">Dashboard</h3>
                  <div className="grow" />
                  <Link href="/echeance/nouvelle">
                    <Button rounded>
                      <div className="flex items-center gap-2">
                        <FolderPlusIcon className="h-6 w-6" />
                        <span>Nouvelle tache</span>
                      </div>
                    </Button>
                  </Link>
                </div>
                {echeances && echeances.data.length === 0 && !search ? (
                  <Card className="mt-4 flex flex-col items-center border-2 bg-gray-50 px-8">
                    <div className="my-8 flex flex-col items-center justify-center gap-2">
                      <div className="flex h-14 w-14 items-center justify-center rounded-full bg-rose-50 text-rose-400">
                        <FireIcon className="h-8 w-8 rounded-full" />
                      </div>
                      <h5 className="text-md font-bold sm:text-lg">
                        Vous n&apos;avez aucune tâche
                      </h5>
                      <p className="text-center text-sm">
                        Vous pouvez en créer une en cliquant sur le bouton
                        ci-dessus !
                      </p>
                    </div>
                  </Card>
                ) : (
                  <Card className="mt-4 flex flex-col border-2 bg-white px-8">
                    <div className="flex w-full flex-row">
                      <h5 className="text-md font-medium sm:text-lg">
                        Liste des tâches
                      </h5>
                      <div className="flex-grow"></div>
                      <Textfield
                        name="search"
                        type="text"
                        placeholder="Rechercher..."
                        onChange={(e) => setSearch(e.target.value)}
                        startIcon={<MagnifyingGlassIcon className="h-4 w-4" />}
                      />
                    </div>
                    <div className="container flex flex-col">
                      <TableDashboard
                        className="mt-6"
                        data={echeances?.data}
                        onSort={(name) => handleSort(name)}
                      />
                      <Pagination
                        currentPage={page}
                        onPageChange={(page) => setPage(page)}
                        totalPages={echeances?.totalPages}
                      />
                    </div>
                  </Card>
                )}
              </div>
            </Card>
          )}
        </div>
      </LoggedLayout>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {
      prisma,
      session: await getSession(context),
    },
    transformer: superjson,
  });

  await helpers.echeance.findAll.prefetch({
    filter: "",
  });
  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
  };
}

Home.auth = true;

export default Home;
