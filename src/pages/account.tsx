import { Avatar, Button, Card, Textfield } from "@/components/core";
import LoggedLayout from "@/components/layout/private";
import { api } from "@/utils/api";
import {
  CloudArrowUpIcon,
  HomeIcon,
  UserIcon,
} from "@heroicons/react/24/outline";
import { zodResolver } from "@hookform/resolvers/zod";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";

import { Controller, useForm } from "react-hook-form";

import { z } from "zod";

const AccountUpdate = z
  .object({
    name: z.string().nonempty({ message: "Ce champ est requis" }),
    email: z.string().email({ message: "Ce champ doit être un email" }),
    password: z.string(),
    newPassword: z
      .string()
      .min(8, { message: "Ce champ doit contenir au moins 8 caractères" }),
    newPasswordConfirmation: z
      .string()
      .min(8, { message: "Ce champ doit contenir au moins 8 caractères" }),
  })
  .refine((data) => data.newPassword === data.newPasswordConfirmation, {
    message: "Les mots de passe ne correspondent pas",
    path: ["newPasswordConfirmation"],
  });

type AccountUpdateType = z.infer<typeof AccountUpdate>;

export default function Account() {
  const [img, setImg] = useState<string>();
  const ref = useRef<HTMLInputElement>(null);

  const { control, setValue } = useForm<AccountUpdateType>({
    resolver: zodResolver(AccountUpdate),
  });

  const { data: session } = useSession({ required: true });

  const utils = api.useContext();

  // 2. pass the click event to the hidden input element to trigger the file selection.
  const handleClick = () => {
    ref.current?.click();
  };

  // 3. convert FileList to File[]
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const reader = new FileReader();

    const file = e.target.files?.[0];

    const formData = new FormData();

    reader.addEventListener("load", () => {
      if (file) {
        setImg(reader.result as string);
      }
    });

    if (file) {
      formData.append("image", file);
      fetch("/api/upload", {
        method: "POST",
        body: formData,
      })
        .then(async () => {
          reader.readAsDataURL(file);
          await utils.auth.getImage.invalidate();
        })
        .catch((e) => console.log(e));
    }
  };

  useEffect(() => {
    if (session) {
      setValue("name", session.user?.name ?? "");
      setValue("email", session.user?.email ?? "");
    }
  }, [session, setValue]);

  return (
    <>
      <Head>
        <title>Deadline - Réglage compte</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LoggedLayout>
        <div className="flex min-h-screen flex-col content-center items-center justify-center ">
          <Card className="invisible mt-6 bg-white sm:visible">
            <div className="container flex flex-col">
              {/* Dashboard Header */}
              <div className="flex items-center gap-4">
                <UserIcon className="h-6 w-6 text-pink-600 sm:h-8 sm:w-8" />

                <h3 className="text-xl font-bold sm:text-2xl">
                  Réglage compte
                </h3>
                <div className="grow" />
                <Link href="/">
                  <Button outlined rounded>
                    <div className="flex items-center gap-2">
                      <HomeIcon className="h-5 w-5" />
                      <span>Retour</span>
                    </div>
                  </Button>
                </Link>
              </div>

              <div className="mt-12 flex flex-col  items-center justify-evenly text-pink-600">
                <div>
                  {img ? (
                    <div
                      className="flex cursor-pointer flex-col items-center gap-2 rounded-full p-4"
                      onClick={handleClick}
                    >
                      <Avatar image={img} />
                    </div>
                  ) : (
                    <div
                      className="flex cursor-pointer flex-col items-center gap-2 rounded-full p-4  hover:bg-rose-100"
                      onClick={handleClick}
                    >
                      <CloudArrowUpIcon className="h-6 w-6" />
                    </div>
                  )}
                  <input
                    accept="image/*"
                    type="file"
                    ref={ref}
                    className="hidden"
                    onChange={handleChange}
                  />
                </div>
                <span>Importer une nouvelle image</span>
              </div>

              <form className="mt-6">
                <hr className="my-4" />

                <div className="mt-4 grid grid-cols-2 gap-4">
                  <Controller
                    name="name"
                    control={control}
                    defaultValue={session?.user?.name ?? ""}
                    render={({ field, fieldState: { error } }) => (
                      <Textfield
                        className="col-span-2"
                        type="text"
                        {...field}
                        label="Nom complet"
                        error={error?.message}
                      />
                    )}
                  />
                  <Controller
                    name="email"
                    control={control}
                    defaultValue={session?.user?.email ?? ""}
                    render={({ field, fieldState: { error } }) => (
                      <Textfield
                        className="col-span-2"
                        type="text"
                        {...field}
                        label="Email"
                        error={error?.message}
                      />
                    )}
                  />
                  <Controller
                    name="password"
                    control={control}
                    defaultValue={""}
                    render={({ field, fieldState: { error } }) => (
                      <Textfield
                        className="col-span-2"
                        type="password"
                        {...field}
                        label="Ancien mot de passe"
                        error={error?.message}
                      />
                    )}
                  />
                  <Controller
                    name="newPassword"
                    control={control}
                    defaultValue={""}
                    render={({ field, fieldState: { error } }) => (
                      <Textfield
                        className="col-span-2"
                        type="password"
                        {...field}
                        label="Nouveau mot de passe"
                        error={error?.message}
                      />
                    )}
                  />
                  <Controller
                    name="newPasswordConfirmation"
                    control={control}
                    defaultValue={""}
                    render={({ field, fieldState: { error } }) => (
                      <Textfield
                        className="col-span-2"
                        type="password"
                        {...field}
                        label="Confirmation"
                        error={error?.message}
                      />
                    )}
                  />

                  <Button type="submit" className="col-span-2 mt-4">
                    Enregistrer
                  </Button>
                </div>
              </form>
            </div>
          </Card>
        </div>
      </LoggedLayout>
    </>
  );
}

Account.auth = true;
